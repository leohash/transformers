name: New model PR CI

on:
  pull_request:
#    paths:
#      - "src/transformers/models/**"

env:
  HF_HOME: /mnt/cache
  TRANSFORMERS_IS_CI: yes
  OMP_NUM_THREADS: 8
  MKL_NUM_THREADS: 8
  RUN_SLOW: yes
  # For gated repositories, we still need to agree to share information on the Hub repo. page in order to get access.
  # This token is created under the bot `hf-transformers-bot`.
  HF_HUB_READ_TOKEN: ${{ secrets.HF_HUB_READ_TOKEN }}
  SIGOPT_API_TOKEN: ${{ secrets.SIGOPT_API_TOKEN }}
  TF_FORCE_GPU_ALLOW_GROWTH: true
  RUN_PT_TF_CROSS_TESTS: 1
  CUDA_VISIBLE_DEVICES: 0,1

jobs:
  check_for_new_model:
      runs-on: ubuntu-22.04
      name: Check if PR is a new model PR
      outputs:
        new_model: ${{ steps.check_new_model.outputs.new_model }}
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: "0"

        - name: Check if there is new model
          id: check_new_model
          run: |
            python -m pip install GitPython==3.1.32
#            python utils/check_if_new_model_added.py
            echo "$(python utils/check_if_new_model_added.py)"
            echo "new_model=$(python utils/check_if_new_model_added.py)" >> $GITHUB_OUTPUT

  run_test:
      name: Run tests for the new model
      if: needs.check_for_new_model.outputs.new_model != ''
      needs: check_for_new_model
      strategy:
        fail-fast: false
        matrix:
          folders: ["${{ needs.check_for_new_model.outputs.new_model }}"]
          machine_type: [single-gpu, multi-gpu]
      runs-on: ['${{ matrix.machine_type }}', nvidia-gpu, t4, daily-ci]
      container:
        image: huggingface/transformers-all-latest-gpu
        options: --gpus all --shm-size "16gb" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/
      steps:
      - name: Echo input and matrix info
        shell: bash
        run: |
          echo "${{ matrix.folders }}"

      - name: Echo folder ${{ matrix.folders }}
        shell: bash
        # For folders like `models/bert`, set an env. var. (`matrix_folders`) to `models_bert`, which will be used to
        # set the artifact folder names (because the character `/` is not allowed).
        run: |
          echo "${{ matrix.folders }}"
          matrix_folders=${{ matrix.folders }}
          matrix_folders=${matrix_folders/'models/'/'models_'}
          echo "$matrix_folders"
          echo "matrix_folders=$matrix_folders" >> $GITHUB_ENV

      - name: Update clone
        working-directory: /transformers
        run: git fetch && git checkout ${{ github.event.pull_request.head.sha }}

      - name: Reinstall transformers in edit mode (remove the one installed during docker image build)
        working-directory: /transformers
        run: python3 -m pip uninstall -y transformers && python3 -m pip install -e .

      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Environment
        working-directory: /transformers
        run: |
          python3 utils/print_env.py

      - name: Show installed libraries and their versions
        working-directory: /transformers
        run: pip freeze

      - name: Run all tests on GPU
        working-directory: /transformers
        run: python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} tests/${{ matrix.folders }}

      - name: Failure short reports
        if: ${{ failure() }}
        continue-on-error: true
        run: cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt

      - name: Run test
        shell: bash
        run: |
          mkdir -p /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}
          echo "hello" > /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/hello.txt
          echo "${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}"

      - name: "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports"
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports
          path: /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}

  result:
      runs-on: ubuntu-22.04
      name: Check test status
      needs: [run_test]
      if: always()
      steps:
        - name: Check test status
          shell: bash
          run: |
            echo "${{ needs.run_test.result }}"
            if [ "${{ needs.run_test.result }}" = "failure" ]; then echo "failure"; exit -1; else echo "pass"; fi;
